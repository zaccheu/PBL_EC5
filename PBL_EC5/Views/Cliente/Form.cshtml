@model ClienteViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .form {
        border: 1px solid #00a1a1;
        border-radius: 15px;
    }

    .form-group {
        display: flex;
        justify-content: space-between; /* labels à esquerda e inputs à direita */
        align-items: center;
        margin-bottom: 12px; /* espaçamento vertical entre grupos */
    }

        .form-group label {
            width: 35%; /* largura das labels */
            font-weight: bold;
            padding-right: 10px; /* espaço à direita para separar visualmente */
            text-align: right; /* alinha labels à direita para estética */
        }

        .form-group input {
            width: 65%; /* largura dos inputs */
            padding: 6px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }

    .btn-submit {
        width: 100px;
        margin-left: auto; /* botão alinhado à direita */
        padding: 8px;
        border: none;
        border-radius: 5px;
        background-color: #00a1a1;
        color: white;
        cursor: pointer;
    }

        .btn-submit:hover {
            background-color: #008181;
        }

</style>

<div class="text-start">

    <h2>Cadastro de Cliente</h2>
    <form class="form p-4" asp-controller="Cliente" asp-action="Salvar" method="post">
        <input type="hidden" name="Operacao" value="@ViewBag.Operacao" />
        @if (Model.Id == 0)
        {
            <input type="text" Name="Id" value="" hidden disabled />
        }
        else
        {
            <input type="text" Name="Id" value="@Model.Id" hidden />
        }

        <div class="form-group">
            <label for="Razao_Social" class="control-label">Razão Social</label>
            <input type="text" Name="Razao_Social" value="@Model.Razao_Social" required maxlength="255" placeholder="Razão Social" />
        </div>

        <div class="form-group">
            <label for="CNPJ" class="control-label">CNPJ</label>
            <input type="text" Name="CNPJ" value="@Model.CNPJ" required maxlength="18" placeholder="00.000.000/0000-00" />
        </div>

        <div class="form-group">
            <label for="CEP" class="control-label">CEP</label>
            <input type="text" Name="CEP" value="@Model.CEP" maxlength="9" placeholder="00000-000" />
        </div>

        <div class="form-group">
            <label for="Rua" class="control-label">Rua</label>
            <input type="text" Name="Rua" value="@Model.Rua" maxlength="255" placeholder="Rua" />
        </div>

        <div class="form-group">
            <label for="Numero" class="control-label">Número</label>
            <input type="number" Name="Numero" value="@Model.Numero" placeholder="Número" />
        </div>

        <div class="form-group">
            <label for="Ativo" class="control-label">Ativo</label>
            <select class="form-control" Name="Ativo" required>
                <option value="1">Sim</option>
                <option value="0">Não</option>
            </select>
        </div>

        <div class="d-flex justify-content-center align-items-center mt-5">
            <a href="/Cliente/Index">Cancelar</a>
            <label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</label>
            <input class="btn btn-success" type="submit" value="Salvar" />
        </div>
    </form>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const cepInput = document.querySelector("input[name='CEP']");
        const ruaInput = document.querySelector("input[name='Rua']");
        const numeroInput = document.querySelector("input[name='Numero']");
        const cnpjInput = document.querySelector("input[name='CNPJ']");

        // Máscara para o CNPJ: 00.000.000/0000-00
        cnpjInput.addEventListener("input", function () {
            let value = cnpjInput.value.replace(/\D/g, ""); // Remove tudo que não é número

            if (value.length <= 14) {
                value = value.replace(/^(\d{2})(\d)/, "$1.$2");
                value = value.replace(/^(\d{2})\.(\d{3})(\d)/, "$1.$2.$3");
                value = value.replace(/\.(\d{3})(\d)/, ".$1/$2");
                value = value.replace(/(\d{4})(\d)/, "$1-$2");
                cnpjInput.value = value;
            }
        });

        // Máscara para o CEP: 00000-000
        cepInput.addEventListener("input", function () {
            let value = cepInput.value.replace(/\D/g, "");

            if (value.length > 8) value = value.substring(0, 8);

            if (value.length >= 6) {
                value = value.replace(/^(\d{5})(\d)/, "$1-$2");
            }

            cepInput.value = value;
        });

        // Preenchimento automático do endereço via ViaCEP
        cepInput.addEventListener("blur", function () {
            const cep = cepInput.value.replace(/\D/g, ""); // Remove caracteres não numéricos

            if (cep.length === 8) {
                fetch(`https://viacep.com.br/ws/${cep}/json/`)
                    .then(response => {
                        if (!response.ok) throw new Error("Erro ao buscar o CEP.");
                        return response.json();
                    })
                    .then(data => {
                        if (data.erro) {
                            alert("CEP não encontrado.");
                        } else {
                            ruaInput.value = data.logradouro || "";
                            numeroInput.focus();
                        }
                    })
                    .catch(error => {
                        console.error("Erro:", error);
                        alert("Não foi possível buscar o CEP.");
                    });
            }
        });
    });
</script>